@using ContosoCrafts.WebSite.Models

@using ContosoCrafts.WebSite.Services

@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavigationManager

@inject JsonFileProductService ProductService


<div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
    <!-- Indicators/Dots -->
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>

    <!-- Carousel Items -->
    <div class="carousel-inner">
        <div class="carousel-item active">
            <a href="javascript:void(0);" @onclick="(e => { SelectProduct(TopClicked.Id); WebsiteCounter(); })"
               data-toggle="modal" data-target="#productModal" id="@(TopClicked.Id + "_Carousel")">
                <img src="@TopClicked.Image" class="d-block w-100" alt="Slide 1">
            </a>
            <div class="carousel-caption d-none d-md-block">
                <h5>Most overall engagement!</h5>
            </div>
        </div>
        <div class="carousel-item">
            <a href="javascript:void(0);" @onclick="(e => { SelectProduct(TopURLClicked.Id); WebsiteCounter(); })"
               data-toggle="modal" data-target="#productModal" id="@(TopURLClicked.Id + "_Carousel")">
                <img src="@TopURLClicked.Image" class="d-block w-100" alt="Slide 2">
            </a>
            <div class="carousel-caption d-none d-md-block">
                <h5>Most popular product website!</h5>
            </div>
        </div>
        <div class="carousel-item">
            <a href="javascript:void(0);" @onclick="(e => { SelectProduct(TopRating.Id); WebsiteCounter(); })"
               data-toggle="modal" data-target="#productModal" id="@(TopRating.Id + "_Carousel")">
                <img src="@TopRating.Image" class="d-block w-100" alt="Slide 3">
            </a>
            <div class="carousel-caption d-none d-md-block">
                <h5>Highest Ratings!</h5>
            </div>
        </div>
    </div>

    <!-- Carousel Controls (Prev/Next) -->
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

<!-- Search bar container -->
<div class="search-container">
    <div class="row align-items-center">
        <!-- Input field for searching products -->
        <input class="search-input form-control col-3" placeholder="Search Project" @bind="SearchString" />
        <!-- Button to initiate search -->
        <button class="btn btn-primary btn-search" type="submit" @onclick="SearchProducts">Search</button>
        <!-- Button to reset the search filter -->
        <button class="btn btn-secondary btn-reset" type="submit" @onclick="ResetSearch">Reset</button>
    </div>
</div>

<!-- Displaying filtered products as cards -->
<div class="card-columns">
    @foreach (var product in FilteredProducts)
    {
        <!-- Card link wraps around each product card -->
        <a href="javascript:void(0);" @onclick="(e => { SelectProduct(product.Id); WebsiteCounter(); })"
           data-toggle="modal" data-target="#productModal" class="card-link" id="@(product.Id + "_MoreInfo")">
            <!-- Card structure -->
            <div class="card">
                    <!-- Display product image as card background -->
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="card-body">
                    <!-- Display product title -->
                    <h5 class="card-title">@product.Title</h5>
                </div>
            </div>
        </a>
    }
</div>
<!-- Modal for displaying detailed product information -->
@if (selectedProduct is object)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <!-- Modal header displaying the product title -->
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">
                        <!-- Link to product URL -->
                        <a href="@selectedProduct.Url" id="@(selectedProduct.Id + "_Url")" target="_blank" @onclick="(e => UrlCounter())">@selectedProduct.Title</a>
                    </h5>
                    <!-- Link to GitHub repository -->
                    <span>
                        <a href="@selectedProduct.GitHub" target="_blank" rel="noopener noreferrer" title="GitHub Repository" class="github-link">
                            <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                                 alt="GitHub" class="github-icon">
                        </a>
                    </span>
                    <!-- Close button for modal -->
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Product image -->
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <!-- Product description -->
                            <p class="card-text">@selectedProduct.ProductType.DisplayName()</p>
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                        <div class="card-body">
                            <!-- Engagement metrics -->
                            <p class="card-text">Total Engagements : @selectedProduct.Counter</p>
                            <p class="card-text">Engagement Rate (%) : @urlClickPercentage %</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                        <!-- Voting feedback -->
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }

                    @if (voteCount > 0)
                    {
                        <span>@voteCount @voteLabel</span>
                    }

                    <!-- Star rating system -->
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;

                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }

                        if (i > currentRating)
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}
<!-- Font Awesome stylesheet for star icons -->

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {
    string SearchString { get; set; } = string.Empty;

    List<ProductModel> FilteredProducts { get; set; } = new List<ProductModel>();

    ProductModel TopRating { get; set; }

    ProductModel TopURLClicked { get; set; }

    ProductModel TopClicked { get; set; }

    // Initialize products on page load
    protected override void OnInitialized()
    {
        FilteredProducts = ProductService.GetAllData().ToList();
        TopClicked = ProductService.GetAllData().OrderByDescending(p => p.Counter).First();
        TopURLClicked = ProductService.GetAllData().Where(p => p.Counter > 0).OrderByDescending(p => (p.UrlCounter / p.Counter)).ThenByDescending(p => p.UrlCounter).First();
        TopRating = ProductService.GetAllData().Where(p => p.Ratings != null).OrderByDescending(p => p.Ratings.Average()).ThenByDescending(p => p.Ratings.Length).First();
    }

    // Filters products by Title
    void SearchProducts()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            FilteredProducts = ProductService.GetAllData()
                .Where(product => product.Title.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    // Resets the search and shows all products
    void ResetSearch()
    {
        SearchString = string.Empty;

        FilteredProducts = ProductService.GetAllData().ToList();
    }

    ProductModel selectedProduct = new ProductModel();

    string selectedProductId;

    // Selects the product and updates relevant data
    void SelectProduct(string productId)
    {
        selectedProductId = productId;

        selectedProduct = ProductService.GetAllData().FirstOrDefault(x => x.Id == productId);

        if (selectedProduct == null)
        {
            NavigationManager.NavigateTo($"/Error", true);
        }

        if (selectedProduct != null)
        {
            GetCurrentRating();

            CalculateUrlClickPercentage();
        }
    }

    int currentRating = 0;

    int voteCount = 0;

    string voteLabel;

    decimal urlClickPercentage = 0;

    // Retrieves and calculates the current rating and vote count
    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;

            voteCount = 0;

            return;
        }

        if (selectedProduct.Ratings is object)
        {
            voteCount = selectedProduct.Ratings.Count();

            voteLabel = voteCount > 1 ? "Votes" : "Vote";

            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }
    }

    // Submits the rating for the selected product
    void SubmitRating(int rating)
    {
        ProductService.AddRating(selectedProductId, rating);

        SelectProduct(selectedProductId);
    }

    // Increments the website counter for the selected product
    void WebsiteCounter()
    {
        ProductService.WebsiteCounter(selectedProductId);
    }

    // Increments the URL counter for the selected product
    void UrlCounter()
    {
        ProductService.UrlCounter(selectedProductId);

        SelectProduct(selectedProductId);
    }

    // Calculates the percentage of URL clicks based on the counters
    void CalculateUrlClickPercentage()
    {
        if (selectedProduct.Counter > 0)
        {
            urlClickPercentage = (decimal)selectedProduct.UrlCounter / selectedProduct.Counter * 100;
        }

        if (selectedProduct.Counter < selectedProduct.UrlCounter)
        {
            urlClickPercentage = 100;
        }

        if (selectedProduct.Counter <= 0)
        {
            urlClickPercentage = 0;
        }
    }
}