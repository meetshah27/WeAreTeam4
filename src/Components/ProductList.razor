@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="card-columns">
    @foreach (var product in ProductService.GetAllData())
    {
        <a href="javascript:void(0);" @onclick="(e => { SelectProduct(product.Id); WebsiteCounter(); })"
       data-toggle="modal" data-target="#productModal" class="card-link" id="@(product.Id + "_MoreInfo")">
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.Title</h5>
                </div>
            </div>
        </a>
    }
</div>

@if (selectedProduct is object)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">
                        <a href="@selectedProduct.Url" id="@(selectedProduct.Id + "_Url")" target="_blank" @onclick="(e => UrlCounter())">@selectedProduct.Title</a>
                    </h5>
                    <span>
                        <a href="@selectedProduct.GitHub" target="_blank" rel="noopener noreferrer" title="GitHub Repository" class="github-link">
                            <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                             alt="GitHub" class="github-icon">
                        </a>
                    </span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                        <div class="card-body">
                            <p class="card-text">Total Engagements : @selectedProduct.Counter</p>
                            <p class="card-text">Engagement Rate (%) : @urlClickPercentage %</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }

                    @if (voteCount > 0)
                    {
                        <span>@voteCount @voteLabel</span>
                    }

                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;

                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }

                        if (i > currentRating)
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct=new ProductModel();
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
        CalculateUrlClickPercentage();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;
    decimal urlClickPercentage = 0;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
            System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
            return;
        }
        if (selectedProduct.Ratings is object)
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    void WebsiteCounter()
    {
        ProductService.WebsiteCounter(selectedProductId);
    }

    void UrlCounter()
    {
        ProductService.UrlCounter(selectedProductId);
        SelectProduct(selectedProductId);
    }

    void CalculateUrlClickPercentage()
    {
        if (selectedProduct.Counter > 0)
        {
            urlClickPercentage = (int)((decimal)selectedProduct.UrlCounter / selectedProduct.Counter * 100);
        }
        if(selectedProduct.Counter<selectedProduct.UrlCounter)
        {
            urlClickPercentage = 100;
        }
        if(selectedProduct.Counter<=0)
        {
            urlClickPercentage = 0;
        }
    }
}
